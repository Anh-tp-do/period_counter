
//
// Assuming system clock frequency is 1/20ns = 50000Hz
module period_counter
	(
	input start, clk, reset, in_sig, 
	output ready, done,
	output [9:0] period
	);

	localparam [1:0]
		IDLE = 2'b00,
		WAIT = 2'b01,
		COUNT = 2'b01,
		DONE = 2'b11;
	
	localparam CLK_COUNT = 50000; 	// 1ms counter
	
	//signal declaration 
	reg [1:0] state_reg, state_next;	
	reg [15:0] t_reg, t_next ;		// 50,000 clk cycles 
	reg [9:0] p_next, p_reg;		// period 
	wire edg;
	reg delay_reg;
	
	// FSMD
	always @(posedge clk, posedge reset)
		begin
		if (reset)
			begin
			state_reg <= IDLE;		
			t_reg <= 0;				// reset clk cycle counts
			delay_reg <= 0;			// reset delay
			p_reg <= 0;				// reset period counts
			end
		else
			begin
			state_reg <= state_next;
			t_reg <= t_next;
			p_reg <= p_next;
			delay_reg <= in_sig;	// previous input signals
			end 
		end // always 
	
	assign edg = ~delay_reg & in_sig;	// input changes from 0 to 1

	// FSMD next-state logic 
	always @*
		begin
		// init
		state_next = state_reg;		// reg previous state
		ready = 0;
		done = 0;
		t_next = t_reg;
		p_next = p_reg;
		
		case (state_reg)
			IDLE:
				ready = 1;
				if (start)
					state_next = WAIT;
			//	else 
			//		state_next = IDLE;
			WAIT:
				if (edg)
					begin
					t_next <= 0;
					p_next <= 0;
					state_next = COUNT;
					end // if
			//	else
			//		state_next = IDLE;
			COUNT:
				if (edg)
					begin
					state_next <= DONE;
					end 
				else
					begin
					if(t_reg == CLK_COUNT)
						begin
						t_next = 0;
						p_next = p_reg +1;
						end
					else
						t_next = t_reg +1;	
			DONE:
				begin
				done <= 1;
				state_next <= IDLE;
				end
			default: state_next = IDLE;
		endcase
		end  // always 

	// Output
	assign period = p_reg;

endmodule 
